<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xi Chen</title>
    <link>https://aaron-xichen.github.io/posts/</link>
    <description>Recent content in Posts on Xi Chen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Sep 2018 22:58:25 +0800</lastBuildDate>
    
	<atom:link href="https://aaron-xichen.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Combinatorial Mathematics Cookbook (I) </title>
      <link>https://aaron-xichen.github.io/posts/cmc1/</link>
      <pubDate>Fri, 28 Sep 2018 22:58:25 +0800</pubDate>
      
      <guid>https://aaron-xichen.github.io/posts/cmc1/</guid>
      <description>组合数学Cookbook（上） 组合数学本质来讲就是提供一套方法论来计数，像排列 $P_n^m$ 和组合 $C_n^m$ ，都是数学家总结抽象发明的符号，凡是n个里面选出m个排成一列，就用排列; 凡是n个里面选出m个放在一堆，就用组合。以此为基础，各种各样高端的令人眼花缭乱的技巧被引入了组合数学，解决的问题也越来越复杂，从最原始的格路问题到后来的整数拆分, 六面体染色等。
值得注意的是，在组合数学里，非常强调的一点是一一对应。所谓一一对应，就是找到的计数方法能对应于原问题的所有可能的情况，即无重复无遗漏地将原始问题的情况罗列出来。这一点非常重要，因为在许多广泛使用的模型里面，如放球模型, 格路模型, Ferrers图像模型等，如果无法实现情况的一一映射，则计数结果必然会出现误差。因此，这就要求我们在选择使用现有模型的过程中，一定要先 思考问题的本质究竟是什么，然后用对应的工具对症下药 。
下面，笔者试着以自己的理解，从最基本的排列组合开始，慢慢引入母函数求解方法，接着回顾放球模型&amp;hellip;. 顺着由浅入深的思路，介绍一下组合数学的知识图谱。囿于笔者眼界的局限性，难免错漏百出，有不正确之处，还望不吝指出。
1. 基本排列与组合 基本的排列组合问题自然不必赘述，如下两个问题明眼一看就知道答案
 Q1: m个男生和n个女生排成一列去紫荆铁板窗口打饭，请问有几种排队情况？
 或者
 Q2: 北京街道都看成方格的话，小明发现从北邮到清华要向西走m条街道，向北走n条街道，试问小明从北邮到清华最短的路径有多少条？
 Q1非常显然，由于每个人是不一样的个体，因此方案数为 $A_{m+n}^{m+n}$，但是如果稍作修改，问
 Q3: m个男生和n各女生打完饭之后，围成一圈一起吃饭，试问有几种情况？
 这个时候就出现问题了，由于现在围成了一个圈，因此没有起始点了，不像Q1一样有队头，这种情况下，不难发现，如果继续沿用Q1的全排列，势必会产生大量重复，模型这个时候不能实现一一对对应了。仔细再分析，重复的来源在于旋转整个圈得到的其实是同一种结果，而 $A_{m+n}^{m+n}$ 却重复计数了$m+n$次。于是我们想到能不能消除这种旋转对称的影响，于是就得到了
$$\frac{1}{m+n}A_{m+n}^{m+n}=A_{m+n-1}^{m+n-1}$$
这个就是圆排列，和原始的线排列比起来，就是多除了一个总元素个数。
Q2就是著名的格路模型，首先最短路径的诉求下小明肯定不会走回头路，换句话说，小明肯定不会往东或者南走，于是，问题就转化为了小明在$m+n$次的前进选择上，哪m次选择了往西(或者哪n次往北)走了一个街区，如下图所示？一旦这m次(或者n次)选择确定了之后，一种方案就随之确定，并且与原问题相比，无重复无遗漏。于是我们得到了路径的条数为$C_{m+n}^m$ 2.性感的母函数之婀娜多姿 前文举了两个简单的排列组合例子，想必已经一窥其中的奥秘，下面由此为基础，首先抛出若干引申的问题，包括可重组合，多重组合，可重排列和多重排列，同时介绍如何利用母函数的技巧把这些问题一网打尽，并且解释如何用母函数统一解决放球模型中的后四种情况。
2.1 可重组合 还是以吃为例，请看一例：
 Q4: 小明为了复习组合数学，3天3夜没有吃饭，今天上午终于坚持到了收卷前的最后一分钟，立马凶神恶煞地冲到紫荆二楼铁板窗口，准备海吃一顿。假设目前只有供应无上限的牛肉和羊肉两种肉，并且肉按两卖，小明打算狂吃10两肉，请问有几种方案？
 可重组合，对应英文的Combination with repetition，也就是说，允许重(sui)复(yi)取相同元素进行组合，回到Q4的例子里，可重集就是牛肉和羊肉，并且无上限。为了让问题更加具体，再看一例：
 Q5: 请问不定方程 $x_1+x_2+&amp;hellip;+x_m=n$ 一共有多少组非负整数解？
 Q4问题并不难，大不了用最原始的方法依次枚举呗，但是如果单纯的枚举，变量一多，看到Q5，顿时就傻眼了&amp;hellip;数学的美妙之处在于将本质抽象映射到基本的若干模型上，为了完美地解决Q4和Q5，首先介绍一种非母函数方法——隔板模型。
我们看Q5，该如何解决这个问题呢？不妨这样思考，把n个元素排成一列，在形成的间隙中随机地插入m-1个隔板，势必能把n个元素分成m堆，这样从左往右依次把第i堆的小球分配给 $x_i$ ，这样这个任务就无重复无遗漏的完成了。再转换一下，把m-1个隔板插入n个元素的过程等效于把这一共n+m-1个元素进行组合，只要确定其中m-1个隔板的位置，那么各隔板两端的小球数量就确定了。按照这个思路，我们得出了
$$C_{n+m-1}^{m-1}$$
有人可能会说，这么转换好麻烦呀，什么球呀堆呀的，有没有统一的无脑方法啊。很幸运，答案是的确存在，这就是母函数。
引入母函数之前，将Q5等效转换原始的放球模型，以方便统一理解：
 Q6: n个相同的小球放入m个有标志的盒子里，请问有多少种放法？
 不加证明地直接给出母函数的表达式：</description>
    </item>
    
    <item>
      <title>Combinatorial Mathematics Cookbook (II) </title>
      <link>https://aaron-xichen.github.io/posts/cmc2/</link>
      <pubDate>Fri, 28 Sep 2018 22:58:25 +0800</pubDate>
      
      <guid>https://aaron-xichen.github.io/posts/cmc2/</guid>
      <description>组合数学Cookbook（下） 5. 退一步海阔天空之递推关系 前面介绍的母函数方法是从正面迎击敌人，把所有的可能囊括其中，一次性解决问题，快准狠。但是另一方面，我们也看到，在小球模型中，虽然得到了相应的母函数表达式，但是怎么展开得到想要的相应项的系数，这是一个令人捉急的问题，顿时有种面对超越方程一般的无奈（自己太弱）。
那么，有没有一种非 一口吃一个胖子 的方法呢？是否能把一个宏大的问题进行切分模块化，然后逐步求解最终解决整个问题的方法呢？很显然，肯定是有的，这就是我们下面要介绍的递推方法。我们将用两个浅(jing)显(dian)的例子来阐述这种思想。
先来一道出自《编程之美》的原题简化版。
 Q1: 现在有两种砖块，分别为 $1\times1$ 和 $1\times2$ ，如果要用这两种砖块铺一个 $1\times N$ 的地面， 一共有几种方案？
 母函数在这面前也露出了难色，由于 $1\times 2$的砖是不能拆开的，因此无法直接用指数型母函数，另外一个难点是用的砖数根本无法确定，仅仅知道长度为N远远不够。那么，我们能不能用Divide and conquer的办法把这个问题的规模缩小呢。
假设规模为n的问题最终的方案数为$a_n$，对于所有可行的方案集$S_0$，如果考虑最后一块砖的话，无非有两种情况，第一种情况是 $1\times 1$，我们将其方案集记成$S_1$；另一种情况是 $1\times2$ ，我们将其方案集记成$S_2$。不难想到，这三个方案集满足一下的关系：
$$|S_0|=|S_1|+|S_2|$$
下面要考虑的是，这三个方案集的元素个数和方案数$a_n$有啥关系。 - 对于$S_0$，易知其元素个数$|S_0|$就是所求的方案数$a_n$
 对于$S_1$，刨去最后一块 $1\times1$ 的砖，长度变为$n-1$，于是其元素个数$|S_1|$为$a_{n-1}$
 对于$S_2$，刨去最后一块$1\times2$ 的砖，长度变为$n-2$，于是其元素个数$|S_2|$为$a_{n-2}$
  综上可以自然而然地得到地推关系： $$a_n = a_{n-1}+a_{n-2}$$
不觉得这个递推很熟悉吗，脑海中没有顿时蹦出一只只鲜活的小兔子吗？对，这就是斐波那契数列的递推式，这是一个线性齐次常系数的递推关系，求解方法已经非常成熟。直接写出其特征方程：
$$x^2=x+1$$
求得两个根为 $$\alpha=\frac{1+\sqrt{5}}{2}$$ $$\beta=\frac{1-\sqrt{5}}{2}$$
因此可以直接写出通解的形式：
$$a_n=A\alpha^n+B\beta^n$$
又由初项$a_1=1$和$a_2=2$，可以确定出A和B的值，然后再代入通解表达式，最终可得：
$$a_n=\frac{2}{\sqrt{5}}(\alpha^{n+1}-\beta^{n+1})$$
这是不是非常的奇妙的求解过程？和母函数的感觉完全不一样。嗯，就是这种feel&amp;hellip;乘胜追击，我们再看一题：
 Q2: 一个圆域， 依圆心等分为n个部分，用k种颜色对这n个域进行涂色，要求相邻的域不同色，试问有多少种涂色方案？
 假设$a_n$为n个域涂k种颜色的方案数，其中每个域为$D_i, i=1,2,&amp;hellip;,n$，那么如果关注$D1$和$D{n-1}$的涂色情况，不难发现无非两种：$D1$和$D{n-1}$的颜色一致，或者颜色不一致。
 对于颜色一致的情况，可以首先让$D_n$取不同于$D1$与$D{n-1}$的其他$k-1$种颜色中的任意一种，然后把$D1$，$D{n}$和$D{n-1}$合并为一种颜色，这样就剩下了$k-2$个域，而这个时候恰好变成了规模为$k-2$的子问题。因此这种情况下的方案数为$(k-1)a{n-2}$ 对于颜色不一致的情况，可以首先让$D_n$取不同于$D1$与$D{n-1}$的其他$k-2$种颜色中的任意一种，另外由于已经知道$D1$和$D{n-1}$的颜色不一致，因此可以直接把剩下刨去$Dn$的$k-1$个域看成规模为$k-1$的子问题。因此这种情况下的方案数为$(k-2)a{n-1}$  综上可以列出最终的递推关系为：</description>
    </item>
    
  </channel>
</rss>